version: "3"

volumes:
  db:
  logs:

name: tasks_manager
services:
  #
  # traefik:
  #   image: traefik:v2.5
  #   command:
  #     - "--log.level=INFO"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true"
  #     - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web"
  #     - "--certificatesresolvers.myhttpchallenge.acme.email=kimdaniil2003r@gmail.com"
  #     - "--certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #     - "./letsencrypt:/letsencrypt"
  #   restart: unless-stopped

  db:
    image: postgres:14
    restart: always
    env_file:
      - .env
    volumes:
      - "db:/var/lib/postgresql/data"
    ports:
      - "5555:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ./wait-for-postgres.sh db python3.12 -m app
    restart: always
    env_file:
      - .env
    volumes:
      - "./logs:/logs"
      - "./images:/images"
    ports:
      - "3333:3333"
    depends_on:
      - db
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.services.api.loadbalancer.server.port=3333"
    #   - "traefik.http.routers.api.rule=Host(``)"
    #   - "traefik.http.routers.api.entrypoints=web"
    #   - "traefik.http.routers.api-secure.rule=Host(``)"
    #   - "traefik.http.routers.api-secure.entrypoints=websecure"
    #   - "traefik.http.routers.api-secure.tls.certresolver=myhttpchallenge"
